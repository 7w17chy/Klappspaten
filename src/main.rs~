use glfw::{Action, Context, Key};
use gl::types::*;

fn main() {
    // initialising glfw
    let mut glfw = glfw::init(glfw::FAIL_ON_ERRORS).unwrap();



    let (mut window, events) = glfw.create_window(300, 300, "Hello, world!", glfw::WindowMode::Windowed)
        .expect("Failed to create GLFW window.");

    window.set_key_polling(true);
    window.make_current();
    
    // loading opengl function pointers
    gl::load_with(|s| window.get_proc_address(s) as *const _);
    
    // print version of opengl to verify everything's setup correctly
    println!("OpenGL version: {}", get_gl_string(gl::VERSION));
    
    while !window.should_close() {
        glfw.poll_events();
        for (_, event) in glfw::flush_messages(&events) {
            handle_window_event(&mut window, event);
        }
    }
}

fn handle_window_event(window: &mut glfw::Window, event: glfw::WindowEvent) {
    match event {
        glfw::WindowEvent::Key(Key::Escape, _, Action::Press, _) => {
            window.set_should_close(true)
        }
        _ => {}
    }
}

fn get_gl_string(name: GLenum) -> String {
    let mut charbuff: Vec<u8> = Vec::new();
    unsafe {
        let ptr_string = gl::GetString(name);
        while *ptr_string != '\0' as u8 {
            charbuff.push(*ptr_string);
            println!("Char: {}", *ptr_string as char);
            // ptr_string += 1;
            ptr_string.offset(1);
        }
        charbuff.push(b'\0');
    }
    match String::from_utf8(charbuff) {
        Ok(s) => s,
        Err(e) => panic!("Error reading opengl string: {}", e),
    }
}
